{"version":3,"sources":["components/searchBox/SearchBox.jsx","components/startupName/StartupName.jsx","components/App.js","serviceWorker.js","index.js"],"names":["Searchbox","placeholder","searchStartupNames","className","type","autoFocus","onKeyPress","e","key","target","value","StartupName","startupName","name","require","App","searchField","setState","startupNames","state","this","map","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gMAIaA,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,mBAAhB,OACrB,2BACIC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,WAAS,EACTC,WAAY,SAAAC,GACM,UAAVA,EAAEC,KACFN,EAAmBK,EAAEE,OAAOC,YCT/BC,G,MAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAC1B,OACI,yBAAKT,UAAU,eACVS,KCCPC,G,MAAOC,EAAQ,KAqCNC,E,kDAlCd,aAAgB,IAAD,8BACd,gBAQDb,mBAAqB,SAACc,GAErB,EAAKC,SAAS,CAAEC,aAAcL,EAAKG,MARnC,EAAKG,MAAQ,CACZD,aAAc,GACdF,YAAa,IALA,E,qDAed,OACC,yBAAKb,UAAU,OACd,sDACA,kBAAC,EAAD,CACCF,YAAY,SACZC,mBAAoBkB,KAAKlB,qBAC1B,yBAAKC,UAAU,2BAEbiB,KAAKD,MAAMD,aAAaG,KAAI,SAAAT,GAE3B,OADAU,QAAQC,IAAI,iBAAkBX,GACvB,kBAAC,EAAD,CAAaA,YAAaA,EAAaJ,IAAKI,a,GA1BxCY,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.e42b536a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './search-box.css';\r\n\r\nexport const Searchbox = ({ placeholder, searchStartupNames }) => (\r\n    <input \r\n        className='search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        autoFocus\r\n        onKeyPress={e => {\r\n            if (e.key === 'Enter') {\r\n                searchStartupNames(e.target.value)\r\n            }\r\n        }}\r\n    />\r\n)","import React from 'react';\r\nimport './startup-name.css';\r\n\r\nexport const StartupName = ({ startupName }) => {\r\n    return (\r\n        <div className=\"result-card\">\r\n            {startupName}\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\n\nimport { Searchbox } from './searchBox/SearchBox';\nimport { StartupName } from './startupName/StartupName';\n\nimport './App.css';\n\nconst name = require('@rstacruz/startup-name-generator')\n\nclass App extends Component {\n\tconstructor () {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tstartupNames: [],\n\t\t\tsearchField: ''\n\t\t}\n\t}\n\n\tsearchStartupNames = (searchField) => {\n\t\t// console.log (name(searchField));\n\t\tthis.setState({ startupNames: name(searchField) });\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Startup Name Generator</h1>\n\t\t\t\t<Searchbox \n\t\t\t\t\tplaceholder=\"Search\"\n\t\t\t\t\tsearchStartupNames={this.searchStartupNames} />\n\t\t\t\t<div className=\"startup-names-container\">\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.startupNames.map(startupName => {\n\t\t\t\t\t\t\tconsole.log('Startup name: ', startupName);\n\t\t\t\t\t\t\treturn <StartupName startupName={startupName} key={startupName} />\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}